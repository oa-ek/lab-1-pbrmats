@using PBRmats.Core.Entities
@model IEnumerable<Material>

@{
    ViewData["Title"] = "Materials";
    var categories = ViewData["Categories"] as IEnumerable<Category>;
    var licenses = ViewData["Licenses"] as IEnumerable<License>;
}

<div class="container-fluid h-100">
    <div class="row flex-grow-1">

        <!-- Left Column -->
        <div class="col-md-3 p-2" style="flex: 0 0 250px; max-width: 250px;">
            <div class="card element h-100">
                <div class="card-header ">
                    Categories
                </div>
                <div class="card-body overflow-auto">
                    @if (categories != null && categories.Any())
                    {
                        <div id="categoryButtons">
                            @foreach (var category in categories)
                            {
                                <button type="button" class="category-btn" data-id="@category.Id">@category.Title</button>
                            }
                        </div>
                    }
                    else
                    {
                        <p>No categories available.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col p-2">
            @{
                Html.RenderPartial("_Materials", Model);
            }
        </div>
    </div>
</div>


<script>
    window.onload = function () {
        const selectedCategoryId = localStorage.getItem('selectedCategoryId');
        const sortBy = localStorage.getItem('sortBy');

        if (sortBy) {
            const select = document.getElementById('sortBy');
            select.value = sortBy;
        }

        if (selectedCategoryId) {
            const button = document.querySelector(`.category-btn[data-id="${selectedCategoryId}"]`);
            if (button) {
                button.classList.add('selected');
            }
        }
    };

    document.querySelectorAll(".category-btn").forEach(button => {
        button.addEventListener("click", function (e) {
            const prevSelected = document.querySelector('.category-btn.selected');
            if (prevSelected) {
                prevSelected.classList.remove('selected');
            }

            if (prevSelected === e.target) {
                localStorage.removeItem('selectedCategoryId');
                window.location.href = "/";
            } else {
                e.target.classList.add('selected');
                localStorage.setItem('selectedCategoryId', e.target.getAttribute('data-id'));
                submitCategoryForm();
            }
        });
    });

    document.getElementById("sortBy").addEventListener("change", function (e) {
        localStorage.setItem('sortBy', e.target.value);
        submitSortByForm();
    });

    function submitCategoryForm() {
        const sortBy = localStorage.getItem('sortBy') || ''; // Use the saved value or default to an empty string
        const selectedCategoryId = localStorage.getItem('selectedCategoryId');

        if (selectedCategoryId) {
            window.location.href = `/Home/Index?categoryId=${selectedCategoryId}&sortBy=${sortBy}`;
        } else {
            window.location.href = `/Home/Index?sortBy=${sortBy}`;
        }
    }

    function submitSortByForm() {
        const selectedCategoryId = localStorage.getItem('selectedCategoryId') || '';
        const sortByValue = document.getElementById("sortBy").value;
        window.location.href = `/Home/Index?categoryId=${selectedCategoryId}&sortBy=${sortByValue}`;
    }
</script>