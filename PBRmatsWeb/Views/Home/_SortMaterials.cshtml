@using PBRmats.Core.Entities
@using Microsoft.AspNetCore.Identity

@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@model IEnumerable<Material>

@{
    var licenses = ViewData["Licenses"] as IEnumerable<License>;
    var isRootAdmin = false;
    var isAdmin = false;
    var isUser = false;
    if (SignInManager.IsSignedIn(User))
    {
        var user = await UserManager.GetUserAsync(User);
        if (user != null)
        {
            isRootAdmin = await UserManager.IsInRoleAsync(user, "RootAdmin");
            isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
            isUser = await UserManager.IsInRoleAsync(user, "User");
        }
    }
}

<div class="flex-column row flex-grow-1 m-0 overflow-hidden flex-wrap gap-2">
    <div class="card element">
        <form method="get" action="/Home/Index">
            <div class="input-group my-3">
                <input type="text" autocomplete="off" class="form-control" placeholder="Search by title" name="searchTerm">
                <!-- Hidden inputs for other filters -->
                <input type="hidden" name="sortBy" id="searchSortBy" />
                <input type="hidden" name="licenseSort" id="searchLicenseSort" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit">Search</button>
                </div>
            </div>
        </form>
    </div>
    <div class="card element">
        <form asp-controller="Home" asp-action="Index" id="filterForm" class="mb-3">
            <input type="hidden" name="searchTerm" id="hiddenSearchTerm" value="">
            <div class="d-flex flex-column flex-md-row justify-content-start align-items-center gap-2">
                <div>
                    <p class="m-0 text-nowrap" for="sortBy">Sorting by:</p>
                </div>
                <div>
                    <select name="sortBy" id="sortBy">
                        <option value="">Date (Newest First)</option>
                        <option value="dateAsc">Date (Oldest First)</option>
                        <option value="titleAsc">Title (A-Z)</option>
                        <option value="titleDesc">Title (Z-A)</option>
                    </select>
                </div>
                <div>
                    <select name="licenseSort" id="licenseSort">
                        <option value="">All Licenses</option>
                        @foreach (var license in licenses)
                        {
                            <option value="@license.Id">@license.Title</option>
                        }
                    </select>
                </div>
            </div>
        </form>

        @{
            Html.RenderPartial("_Materials", Model);
        }
    </div>
</div>